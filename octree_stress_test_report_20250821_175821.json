{
  "timestamp": "2025-08-21T17:58:21.006229",
  "total_tests": 3,
  "passed_tests": 1,
  "failed_tests": 2,
  "total_duration": 24.114769458770752,
  "results": [
    {
      "name": "Collision Detection Stress Tests",
      "file": "Lib/test/test_octree_stress_collisions.py",
      "success": true,
      "duration": 0.7326114177703857,
      "return_code": 0,
      "stdout": "\ud83d\ude80 OCTREE COLLISION DETECTION STRESS TESTS\n==================================================\n\n\ud83d\udd25 COLLISION STRESS TEST: Accuracy Verification\n============================================================\n\ud83d\udcca Tested 100 collision queries against brute force\n\ud83d\udcca Average accuracy: 100.00%\n\ud83d\udcca Query time: 0.031s (0.31ms per query)\n\n\ud83d\udd25 COLLISION STRESS TEST: Boundary Collisions\n============================================================\n\ud83d\udcca Inserted 11,000 boundary objects\n\ud83d\udcca Tree depth: 16\n\ud83d\udcca Boundary query results: [1000, 1000, 1000, 999, 0]\n\ud83d\udcca Query time: 0.004s\n\n\ud83d\udd25 COLLISION STRESS TEST: Performance Scaling\n============================================================\n\n\ud83d\udd2c Testing with 1,000 objects...\n   Insert time: 0.002s\n   Avg query time: 0.01ms\n   Tree depth: 4\n   Memory: 231,984 bytes\n\n\ud83d\udd2c Testing with 5,000 objects...\n   Insert time: 0.014s\n   Avg query time: 0.03ms\n   Tree depth: 5\n   Memory: 1,019,952 bytes\n\n\ud83d\udd2c Testing with 10,000 objects...\n   Insert time: 0.023s\n   Avg query time: 0.04ms\n   Tree depth: 5\n   Memory: 1,617,840 bytes\n\n\ud83d\udd2c Testing with 25,000 objects...\n   Insert time: 0.060s\n   Avg query time: 0.11ms\n   Tree depth: 5\n   Memory: 6,908,976 bytes\n\n\ud83d\udd2c Testing with 50,000 objects...\n   Insert time: 0.105s\n   Avg query time: 0.16ms\n   Tree depth: 6\n   Memory: 9,791,280 bytes\n\n\ud83d\udcc8 SCALING ANALYSIS:\n   Objects  Insert(s)  Query(ms)    Depth   Memory(MB)\n------------------------------------------------------------\n     1,000     0.002      0.01        4         0.2\n     5,000     0.014      0.03        5         1.0\n    10,000     0.023      0.04        5         1.5\n    25,000     0.060      0.11        5         6.6\n    50,000     0.105      0.16        6         9.3\n\n\ud83d\udcca Query time scaling factor: 17.77x for 50.0x more objects\n\n\ud83d\udd25 COLLISION STRESS TEST: Massive Overlapping Objects\n============================================================\n\ud83d\udcca Inserted 50000 overlapping objects in 0.143s\n\ud83d\udcca Query time: 0.067s\n\ud83d\udcca Tree depth: 13\n\ud83d\udcca Memory usage: 11,004,336 bytes\n\n\ud83c\udfaf Collision Results per Cluster:\n   cluster_0: 22,979 potential collisions\n   cluster_1: 32,292 potential collisions\n   cluster_2: 14,271 potential collisions\n   cluster_3: 15,143 potential collisions\n   cluster_4: 15,185 potential collisions\n   cluster_5: 15,984 potential collisions\n",
      "stderr": "test_collision_accuracy_verification (__main__.CollisionStressTest.test_collision_accuracy_verification)\nVerify collision detection accuracy against brute force method. ... ok\ntest_collision_boundary_stress (__main__.CollisionStressTest.test_collision_boundary_stress)\nTest collision detection at octree boundaries. ... ok\ntest_collision_performance_scaling (__main__.CollisionStressTest.test_collision_performance_scaling)\nTest how collision detection performance scales with object count. ... ok\ntest_massive_overlapping_objects (__main__.CollisionStressTest.test_massive_overlapping_objects)\nTest collision detection with thousands of overlapping objects. ... ok\n\n----------------------------------------------------------------------\nRan 4 tests in 0.627s\n\nOK\n"
    },
    {
      "name": "Object Creation Stress Tests",
      "file": "Lib/test/test_octree_stress_objects.py",
      "success": false,
      "duration": 22.864291191101074,
      "return_code": 1,
      "stdout": "\ud83d\ude80 OCTREE OBJECT CREATION STRESS TESTS\n==================================================\n\n\ud83d\udd25 OBJECT CREATION STRESS TEST: Concurrent Creation\n=================================================================\n\ud83e\uddf5 Creating 8 threads, 5,000 objects per thread\n\ud83d\udcca Total concurrent objects: 40,000\n\n\ud83d\udcc8 CONCURRENT RESULTS:\n   Successful threads: 8/8\n   Total objects created: 40,000\n   Total concurrent time: 0.086s\n   Average thread time: 0.012s\n   Concurrent speedup: 0.1x\n   Total memory usage: 8,059,392 bytes (7.7 MB)\n   Creation rate: 462686 objects/sec\n\n\ud83d\udcca PER-THREAD BREAKDOWN:\n  Thread    Objects  Time(s)     Size  Depth   Memory(KB)\n----------------------------------------------------------------------\n       0      5,000   0.009    5,000      5       992.7\n       1      5,000   0.010    5,000      5       979.2\n       2      5,000   0.016    5,000      4       972.4\n       3      5,000   0.015    5,000      5       985.9\n       4      5,000   0.010    5,000      4       985.9\n       5      5,000   0.010    5,000      5       989.3\n       6      5,000   0.015    5,000      5       985.9\n       7      5,000   0.014    5,000      5       979.2\n\n\ud83d\udd25 OBJECT CREATION STRESS TEST: Massive Object Creation\n=================================================================\n\ud83c\udfed Creating 1,000 octree instances with 1,000 objects each\n\ud83d\udcca Total objects to manage: 1,000,000\n   Progress: 100/1,000 trees (527.6 trees/sec)\n   Progress: 200/1,000 trees (522.6 trees/sec)\n   Progress: 300/1,000 trees (502.2 trees/sec)\n   Progress: 400/1,000 trees (494.4 trees/sec)\n   Progress: 500/1,000 trees (480.7 trees/sec)\n   Progress: 600/1,000 trees (481.3 trees/sec)\n   Progress: 700/1,000 trees (484.2 trees/sec)\n   Progress: 800/1,000 trees (484.9 trees/sec)\n   Progress: 900/1,000 trees (486.4 trees/sec)\n   Progress: 1,000/1,000 trees (487.0 trees/sec)\n\n\ud83d\udcc8 CREATION RESULTS:\n   Total creation time: 2.05s\n   Average time per tree: 0.0020s\n   Creation rate: 487.0 trees/sec\n   Total memory usage: 223,167,744 bytes (212.8 MB)\n   Average memory per tree: 223,167.744 bytes (217.9 KB)\n   Memory per object: 223.2 bytes\n   Cleanup time: 0.187s\n\n\ud83d\udd25 OBJECT CREATION STRESS TEST: Memory Leak Detection\n=================================================================\n\ud83d\udd0d Running 50 cycles of 2,000 objects each...\n   Cycle 10: 0.007s, Memory: 518,832 bytes, Avg(last 10): 516,067 bytes\n   Cycle 20: 0.006s, Memory: 536,112 bytes, Avg(last 10): 526,090 bytes\n   Cycle 30: 0.008s, Memory: 536,112 bytes, Avg(last 10): 515,376 bytes\n   Cycle 40: 0.007s, Memory: 518,832 bytes, Avg(last 10): 517,795 bytes\n   Cycle 50: 0.007s, Memory: 529,200 bytes, Avg(last 10): 515,376 bytes\n\n\ud83d\udcca MEMORY ANALYSIS:\n   First 10 cycles average: 516,067 bytes\n   Last 10 cycles average: 515,376 bytes\n   Memory growth: -691 bytes (-0.1%)\n\u2705 Memory leak test completed - no significant leaks detected\n\n\ud83d\udd25 OBJECT CREATION STRESS TEST: Object Lifecycle\n=================================================================\n\ud83c\udf31 Phase 1: Inserting 100,000 objects...\n   Insertion completed in 0.231s (433725 objects/sec)\n   Tree size: 100,000\n   Memory usage: 18,839,088 bytes (18.0 MB)\n\n\ud83d\udd04 Phase 2: Random operations...\n   Operations completed in 19.679s (508 ops/sec)\n   Final tree size: 100,000\n   Final memory usage: 18,839,088 bytes (18.0 MB)\n\n\ud83d\udd04 Phase 3: Tree reconstruction...\n   Reconstruction completed in 0.073s\n   Reconstructed size: 50,000\n   Reconstructed memory: 9,774,000 bytes (9.3 MB)\n\n\ud83d\udd25 OBJECT CREATION STRESS TEST: Reference Management\n=================================================================\n\ud83d\udce6 Inserted 9 objects with various data types\n   \u274c Missing reference: simple_string\n   \u274c Missing reference: another_string_with_numbers_123\n   \u274c Missing reference: unicode_string_\ud83c\udf33\ud83d\udd25\ud83d\udcca\n   \u274c Missing reference: very_long_string_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n   \u274c Missing reference: 42\n   \u274c Missing reference: 3.14159\n   \u274c Missing reference: -999.999\n   \u274c Missing reference: {\"type\": \"test\", \"value\": 42}\n   \u274c Missing reference: [\"list\", \"of\", \"items\"]\n\ud83d\udd04 Testing bulk operations with 9 references...\n\n\ud83d\udcca REFERENCE INTEGRITY RESULTS:\n   Initial correct references: 0/9\n   After bulk operations: 0/9\n   Reference stability: True\n",
      "stderr": "test_concurrent_object_creation (__main__.ObjectCreationStressTest.test_concurrent_object_creation)\nTest concurrent object creation from multiple threads. ... FAIL\ntest_massive_object_creation (__main__.ObjectCreationStressTest.test_massive_object_creation)\nTest creating and destroying massive numbers of octree objects. ... ok\ntest_memory_leak_detection (__main__.ObjectCreationStressTest.test_memory_leak_detection)\nTest for memory leaks during object creation and destruction. ... ok\ntest_object_lifecycle_stress (__main__.ObjectCreationStressTest.test_object_lifecycle_stress)\nTest object insertion, modification, and removal under stress. ... ok\ntest_object_reference_management (__main__.ObjectCreationStressTest.test_object_reference_management)\nTest proper handling of object references and data. ... FAIL\n\n======================================================================\nFAIL: test_concurrent_object_creation (__main__.ObjectCreationStressTest.test_concurrent_object_creation)\nTest concurrent object creation from multiple threads.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/nico/WORK_ROOT/cpython/Lib/test/test_octree_stress_objects.py\", line 326, in test_concurrent_object_creation\n    self.assertGreater(avg_thread_time / total_concurrent_time, 1.5,\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                      \"Should show meaningful concurrent speedup\")\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 0.14443230236759008 not greater than 1.5 : Should show meaningful concurrent speedup\n\n======================================================================\nFAIL: test_object_reference_management (__main__.ObjectCreationStressTest.test_object_reference_management)\nTest proper handling of object references and data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/nico/WORK_ROOT/cpython/Lib/test/test_octree_stress_objects.py\", line 469, in test_object_reference_management\n    self.assertEqual(correct_references, total_queries,\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                    \"All initial references should be found\")\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 0 != 9 : All initial references should be found\n\n----------------------------------------------------------------------\nRan 5 tests in 22.759s\n\nFAILED (failures=2)\n"
    },
    {
      "name": "API Robustness Stress Tests",
      "file": "Lib/test/test_octree_stress_api.py",
      "success": false,
      "duration": 0.517866849899292,
      "return_code": 1,
      "stdout": "\ud83d\ude80 OCTREE API STRESS TESTS\n==================================================\n\n\ud83d\udd25 API STRESS TEST: API Abuse Scenarios\n============================================================\n\ud83d\udd28 Scenario 1: Rapid-fire mixed operations...\n   Completed 10,000 operations in 0.034s\n   Operations/sec: 292812\n   Errors: 0\n\n\ud83d\udcbe Scenario 2: Memory pressure with large objects...\n   Large object insertions completed in 0.006s\n\n\ud83d\udd25 API STRESS TEST: API Consistency Verification\n============================================================\n\ud83d\udd04 Testing API consistency across different approaches...\n   Tree 1: Sequential insertion...\n   Tree 2: Random order insertion...\n\n\ud83d\udd25 API STRESS TEST: Concurrent API Access\n============================================================\n\ud83e\uddf5 Starting 8 concurrent workers...\n\n\ud83d\udcca CONCURRENT ACCESS RESULTS:\n   Total time: 0.356s\n   Total operations: 8,000\n   Total errors: 0\n   Overall rate: 22485 ops/sec\n   Error rate: 0.00%\n\n\ud83d\udcc8 PER-THREAD BREAKDOWN:\nThread         Type      Ops  Errors  Time(s)  Ops/sec\n-----------------------------------------------------------------\n     0 heavy_insert     1000       0    0.00  554802\n     1 heavy_insert     1000       0    0.00  490046\n     2  heavy_query     1000       0    0.03   32939\n     3  heavy_query     1000       0    0.04   26417\n     4        mixed     1000       0    0.00  225694\n     5        mixed     1000       0    0.00  237813\n     6   properties     1000       0    0.31    3224\n     7   properties     1000       0    0.00 4080062\n\n\ud83d\udd25 API STRESS TEST: Extreme Boundary Conditions\n============================================================\n\n\ud83e\uddea Testing: Microscopic bounds\n    Bounds: (0, 0, 0, 0.001, 0.001, 0.001)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Ultra-tiny centered\n    Bounds: (-0.0001, -0.0001, -0.0001, 0.0001, 0.0001, 0.0001)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Million-unit bounds\n    Bounds: (-1000000.0, -1000000.0, -1000000.0, 1000000.0, 1000000.0, 1000000.0)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Billion-unit bounds\n    Bounds: (-1000000000.0, -1000000000.0, -1000000000.0, 1000000000.0, 1000000000.0, 1000000000.0)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Highly asymmetric\n    Bounds: (-1000, -1, -10, 1000, 1, 10)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Extreme aspect ratio\n    Bounds: (0, 0, 0, 1000, 10, 1)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Unit cube\n    Bounds: (-1, -1, -1, 1, 1, 1)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83e\uddea Testing: Offset positive\n    Bounds: (100, 100, 100, 200, 200, 200)\n      \u2705 Query returned 4 objects\n      \ud83d\udcca Size: 4, Depth: 0, Memory: 432 bytes, Empty: False\n\n\ud83d\udd25 API STRESS TEST: Invalid Input Handling\n============================================================\n\ud83d\udd0d Testing invalid octree creation...\n   Case 1: Properly rejected bounds (10, 10, 10, 0, 0, 0)\n   Case 2: Properly rejected bounds (0, 10, 0, 10, 0, 10)\n   Case 3: Properly rejected bounds (nan, 0, 0, 10, 10, 10)\n   Case 4: Created with bounds (0, 0, 0, inf, 10, 10) (unexpected success)\n   Case 5: Created with bounds (-inf, 0, 0, 10, 10, 10) (unexpected success)\n   Case 6: Created with bounds (5, 5, 5, 5, 5, 5) (unexpected success)\n   Case 7: Created with bounds (0, 0, 0, 0, 10, 10) (unexpected success)\n\n\ud83d\udd0d Testing invalid insertions...\n   Inserted (nan, 0, 0, 'nan_x') - unexpected success\n   Inserted (0, nan, 0, 'nan_y') - unexpected success\n   Inserted (0, 0, nan, 'nan_z') - unexpected success\n   Inserted (inf, 0, 0, 'inf_x') - unexpected success\n   Inserted (0, -inf, 0, 'neg_inf_y') - unexpected success\n   Inserted (100, 0, 0, 'out_of_bounds_x') - unexpected success\n   Inserted (0, 100, 0, 'out_of_bounds_y') - unexpected success\n   Inserted (0, 0, 100, 'out_of_bounds_z') - unexpected success\n   Inserted (10, 10, 10, 'exactly_on_boundary') - unexpected success\n   Inserted (-10, -10, -10, 'exactly_on_min_boundary') - unexpected success\n\n\ud83d\udd0d Testing invalid queries...\n   Properly rejected query (5, 5, 5, 0, 0, 0): ValueError\n   Properly rejected query (nan, 0, 0, 5, 5, 5): ValueError\n   Properly rejected query (0, 0, 0, nan, 5, 5): ValueError\n   Query (-inf, 0, 0, 5, 5, 5) returned 0 results (unexpected success)\n   Query (0, 0, 0, inf, 5, 5) returned 0 results (unexpected success)\n\n\ud83d\udcca Invalid input handling: 6/22 properly rejected\n",
      "stderr": "test_api_abuse_scenarios (__main__.APIStressTest.test_api_abuse_scenarios)\nTest API under abusive usage patterns. ... ERROR\ntest_api_consistency_verification (__main__.APIStressTest.test_api_consistency_verification)\nVerify API consistency across different usage patterns. ... ERROR\ntest_concurrent_api_access (__main__.APIStressTest.test_concurrent_api_access)\nTest API thread safety and concurrent access patterns. ... ERROR\ntest_extreme_boundary_conditions (__main__.APIStressTest.test_extreme_boundary_conditions)\nTest API with extreme boundary conditions and edge cases. ... ok\ntest_invalid_input_handling (__main__.APIStressTest.test_invalid_input_handling)\nTest API robustness with invalid inputs. ... FAIL\n\n======================================================================\nERROR: test_api_abuse_scenarios (__main__.APIStressTest.test_api_abuse_scenarios)\nTest API under abusive usage patterns.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/nico/WORK_ROOT/cpython/Lib/test/test_octree_stress_api.py\", line 313, in test_api_abuse_scenarios\n    print(f\"   Final tree memory: {tree.get_memory_usage():,} bytes\")\n                                   ^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'octree.Octree' object has no attribute 'get_memory_usage'. Did you mean: 'memory_usage'?\n\n======================================================================\nERROR: test_api_consistency_verification (__main__.APIStressTest.test_api_consistency_verification)\nVerify API consistency across different usage patterns.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/nico/WORK_ROOT/cpython/Lib/test/test_octree_stress_api.py\", line 548, in test_api_consistency_verification\n    tree1_depth = tree1.get_depth()\n                  ^^^^^^^^^^^^^^^\nAttributeError: 'octree.Octree' object has no attribute 'get_depth'\n\n======================================================================\nERROR: test_concurrent_api_access (__main__.APIStressTest.test_concurrent_api_access)\nTest API thread safety and concurrent access patterns.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/nico/WORK_ROOT/cpython/Lib/test/test_octree_stress_api.py\", line 499, in test_concurrent_api_access\n    final_depth = shared_tree.get_depth()\n                  ^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'octree.Octree' object has no attribute 'get_depth'\n\n======================================================================\nFAIL: test_invalid_input_handling (__main__.APIStressTest.test_invalid_input_handling)\nTest API robustness with invalid inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/nico/WORK_ROOT/cpython/Lib/test/test_octree_stress_api.py\", line 230, in test_invalid_input_handling\n    self.assertGreater(error_count, total_tests * 0.5,\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                      \"Should reject majority of invalid inputs\")\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 6 not greater than 11.0 : Should reject majority of invalid inputs\n\n----------------------------------------------------------------------\nRan 5 tests in 0.421s\n\nFAILED (failures=1, errors=3)\n"
    }
  ]
}